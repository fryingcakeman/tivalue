type DeclaredPieceRecord = {
	file_id        :string,
	piece_id       :string,
	storer_account :string,
	node_id        :string,
	storer_key     :string
}

type PieceInfo = {
    piece_id :string,
    size     :number,
    price    :number
}

type FileSavedRecord = {
    file_id        :string,
    owner          :string,
    copy_to_save   :number,
    payterm        :number,
    filename       :string,
    description    :string,
    upload_node    :string
}

type NodeIdAndKey = {
    storer_key :string,
    node_id    :string
}

type Payment= {
    file_id        :string,
    piece_id       :string,
    account_key    :string,
    node_id        :string,
    term           :number,
    amount         :number,
    last_pay_block :number
}

type PieceUploadedRecord = {
    piece_id     :string,
    file_id      :string,
    copy_to_save :number,
    price        :number,
    payterm      :number,
    node_id      :string
}

type PieceSavedRecord = {
    piece_id     :string,
    file_id      :string,
    copy_to_save :number,
    price        :number,
    payterm      :number,
    nodes        :Array<string>    
}

type Storage = {
    users_balance           :Map<number>,
    users_spending_balance  :Map<number>,
	upload_info_table       :Map<string>,
	piece_uploaded_table    :Map<string>,
    piece_saved_table       :Map<string>,
	piece_declared_table    :Map<string>,
	unPaied                 :Array<string>
}

var M = Contract<Storage>()

function M:init()
    self.storage.users_balance = {}
    self.storage.users_spending_balance = {}
    self.storage.piece_saved_table = {}
	self.storage.piece_uploaded_table = {}
	self.storage.upload_info_table = {}
    self.storage.piece_declared_table = {}
    self.storage.unPaied = []
end

function M:pay()
    pprint("==============call pay========================")
    pprint(self.storage.unPaied)
    local height:number = get_header_block_num()
    local unPaied:Array<string> = self.storage.unPaied
    local to_remove:Array<number> = []
    for i = 1,#unPaied do
        local rec:Payment = totable(json.loads(unPaied[i]))
        pprint("inpay")
        if (rec.last_pay_block < (height - 10)) and (rec.term > 0)  then
            local pay_amount = rec.amount / rec.term
            pprint(pay_amount)
            local transfer_state:int = 0
            if pay_amount > 0 then
                pprint("start_py")
                transfer_state = transfer_from_contract_to_address(get_publickey_address(rec.account_key), "TV", tointeger(pay_amount*100000))
            end
            if transfer_state == 0 then
                pprint("pay_success")
                rec.term = rec.term - 1
                rec.amount = rec.amount - pay_amount
                rec.last_pay_block = height
                if rec.term == 0 then
                    table.append(to_remove, i)
                else
                    self.storage.unPaied[i] = json.dumps(rec);
                end
            end
        end
    end
    if  #to_remove > 1 then
        pprint(to_remove)
        local remove_count = #to_remove
        for i = 1, remove_count do
            pprint(self.storage.unPaied) 
            table.remove(self.storage.unPaied, to_remove[remove_count + 1 - i])
        end
        pprint(self.storage.unPaied) 
        pprint("remove end")
    end
end

function M:Upload(args:string)
    self:pay()

	--检查参数个数
    local params :Array<string> = string.split(args, ";")
    local num_of_arg:number = #params
	if num_of_arg < 8 then 
		pprint("Upload Error:num of args < 8.")
		return 
    end	
	
	--获得参数
    local piece_num    :number = num_of_arg - 7
    local file_id      :string = params[1]
    local num_of_piece :number = tonumber(params[2])
    if piece_num ~= num_of_piece then 
        pprint("Upload Error:piece number error.")
        return 
    end
	local num_of_copy :number = tonumber(params[3 + num_of_piece])
    local payterm     :number = tonumber(params[4 + num_of_piece])
	local node_id     :string = tostring(params[7 + num_of_piece])
	
	--获取分片信息
    local price  :number = 0
    local pieces :Array<PieceInfo> = []
    for i = 1, num_of_piece do
        local piece_info = PieceInfo()
        local arr :Array<string> = string.split(tostring(params[2 + i]), ",")
        if #arr ~= 3 then
            pprint("Upload Error:piece field error.")
            return 
        end
        
        piece_info.piece_id = tostring(arr[1])
        piece_info.size     = tonumber(arr[2])
        piece_info.price    = todouble(arr[3])
        price = price + piece_info.price
        table.append(pieces, piece_info)
    end

	--检查合约调用者
    if self.storage.users_balance[caller] == nil then
		pprint("Upload Error: caller balance is nil.")
        return
    end
	--检查合约调用者是否有足够金额调用合约
    if self.storage.users_balance[caller] < 100000 * price * num_of_copy then 
        pprint("Upload Error:user balance is not enough.")
        return
    end
	
	--文件上传信息加入upload_info_table
    local file_save_rec :FileSavedRecord = FileSavedRecord()
    file_save_rec.file_id      = file_id
    file_save_rec.copy_to_save = num_of_copy
    file_save_rec.owner        = caller
    file_save_rec.filename     = tostring(params[5 + num_of_piece])
    file_save_rec.description  = tostring(params[6 + num_of_piece])
    file_save_rec.upload_node  = tostring(params[7 + num_of_piece])
	
    if self.storage.upload_info_table[file_id] ~= nil then 
        pprint("Upload Error:file id has existed.")
        error("")
    end
    self.storage.upload_info_table[file_id] = json.dumps(file_save_rec)
	
	--将文件的分片信息加入piece_uploaded_table
    for i = 1, #pieces do
        if self.storage.piece_uploaded_table[file_id..pieces[i].piece_id] ~= nil then
            pprint("Upload Error:piece has existed.")
            error("")
        end
        local piece_uploaded_rec        = PieceUploadedRecord()
        piece_uploaded_rec.piece_id     = pieces[i].piece_id
        piece_uploaded_rec.file_id      = file_id
        piece_uploaded_rec.price        = pieces[i].price
        piece_uploaded_rec.copy_to_save = num_of_copy
        piece_uploaded_rec.payterm      = payterm  
        piece_uploaded_rec.node_id      = node_id
        self.storage.piece_uploaded_table[file_id..pieces[i].piece_id] = json.dumps(piece_uploaded_rec)
    end

	--调用钱包函数
    if false == allow_upload_request(file_id, caller, pieces, num_of_copy, payterm, file_save_rec.filename, file_save_rec.description, file_save_rec.upload_node) then
        pprint("Upload Error:upload request is not allowed.")
        error("")
    end
	pprint("upload successful.")
end

function M:Declare(args:string)
	self:pay()
	pprint("=====call Declare======")
	--检查参数个数
	local params:Array<string> = string.split(args, ";")
	if #params ~= 4 then
		pprint("Declare error: num of args error.")
		return
	end
	pprint("======declare args=====")
	for i = 1, #params do
		pprint(params[i])
	end
	pprint("=======================")

	--获取参数
	local file_id        :string = params[1]
	local piece_id       :string = params[2]
	local storer_account :string = params[4]
	local node_id        :string = params[3]
	
	--将改声明加入piece_declared_table
	local tmp_decl_rec :string = ""
	if self.storage.piece_declared_table[file_id..piece_id] ~= nil then
		tmp_decl_rec = self.storage.piece_declared_table[file_id..piece_id]
	end
	
	local piece_declared_rec :DeclaredPieceRecord = DeclaredPieceRecord()
	piece_declared_rec.file_id        = file_id
	piece_declared_rec.piece_id       = piece_id
	piece_declared_rec.storer_account = storer_account
	piece_declared_rec.node_id        = node_id
	piece_declared_rec.storer_key     = caller
	
	tmp_decl_rec = tmp_decl_rec.."^"..json.dumps(piece_declared_rec)
	self.storage.piece_declared_table[file_id..piece_id] = tmp_decl_rec
	if false == allow_declare_piece_saved(file_id, piece_id, storer_account, node_id) then
		pprint("Declare error: call allow declare piece saved.")
	end
	pprint("declare successfully.")	
end


function M:Confirm(args:string)
	self:pay()
	pprint("=====call Confirm=====")	
	local params:Array<string> = string.split(args, ";")
	if #params ~= 3 then
		pprint("Confirm error: num of args error.")
		return
	end
	pprint("=====confitm args======")
	for i = 1, #params do
		pprint(params[i])
	end
	pprint("=======================")

	local file_id        :string = params[1]
	local piece_id       :string = params[2]
	local key_to_confirm :string = params[3]
	local node_id        :string = ""
	
	
	local unPaied = self.storage.unPaied
    for i = 1, #unPaied do
        local info: Payment = totable(json.loads(unPaied[i]))
        if info.file_id == file_id and info.piece_id == piece_id and info.account_key == key_to_confirm then
             pprint("Confirm failure: You have not paid the piece.") 
            error("")
        end
    end
	
	local declared_str :string = self.storage.piece_declared_table[file_id..piece_id]
	local decl_arr :Array<string> = string.split(declared_str, "^")
	for i = 1, #decl_arr do
		local decl_rec :DeclaredPieceRecord = totable(json.loads(decl_arr[i]))
		if decl_rec.storer_key == key_to_confirm then
			node_id = decl_rec.node_id
		end
	end
	
	local piece_saved_str :string = self.storage.piece_saved_table[file_id..piece_id]
	
	--已保存的分片中有该分片的信息
	if piece_saved_str ~= nil then
		local piece_saved_rec :PieceSavedRecord = totable(json.loads(piece_saved_str))
		local saved_nodes   = piece_saved_rec.nodes
		local price :number = piece_saved_rec.price
		local term  :number = piece_saved_rec.payterm
		
		--已保存分片的节点数和拷贝数相同
		if piece_saved_rec.copy_to_save == #saved_nodes then
			pprint("Comfirm failure:Have no copy for you to save.") 
			return 
		end
		
		--已保存的节点中有该节点
		for i = 1, #saved_nodes do
			if node_id == saved_nodes[i] then
				pprint("Comfirm failure:You have saved the piece.")
				return
			end
		end
		
		--加入节点
		pprint("*******1********")
		piece_saved_rec.nodes[#piece_saved_rec.nodes+1] = node_id
		
		--更新Map
		self.storage.piece_saved_table[file_id..piece_id] = json.dumps(piece_saved_rec)
		
		--确认保存
		local new_pay_ment :Payment = Payment()
		new_pay_ment.amount         = price
		new_pay_ment.file_id        = file_id
		new_pay_ment.piece_id       = piece_id
		new_pay_ment.term           = term
		new_pay_ment.last_pay_block = get_header_block_num()
		new_pay_ment.node_id        = node_id
		new_pay_ment.account_key    = key_to_confirm
		pprint("********2*******")
		table.append(self.storage.unPaied, json.dumps(new_pay_ment))	
	else
		--已保存的分片中没有该分片
		local piece_saved_rec2 :PieceSavedRecord = PieceSavedRecord()
		local piece_uploaded :PieceUploadedRecord = totable(json.loads(self.storage.piece_uploaded_table[file_id..piece_id]))	
		piece_saved_rec2.piece_id     = piece_id
		piece_saved_rec2.file_id      = file_id
		piece_saved_rec2.copy_to_save = piece_uploaded.copy_to_save
		piece_saved_rec2.price        = piece_uploaded.price
		piece_saved_rec2.payterm      = piece_uploaded.payterm
		piece_saved_rec2.nodes        = []
		
		local str:string = self.storage.piece_declared_table[file_id..piece_id]
		pprint(str)
		local rec :Array<string> = string.split(str, "^")
		for i = 1, #rec do
			local declare_rec :DeclaredPieceRecord = DeclaredPieceRecord()
			declare_rec = totable(json.loads(rec[i]))
			if declare_rec.storer_key == key_to_confirm then
				node_id = declare_rec.node_id
				break			
			end
		end

		--加入节点
		table.append(totable(piece_saved_rec2.nodes),node_id)
		
		--更新Map
		self.storage.piece_saved_table[file_id..piece_id] = json.dumps(piece_saved_rec2)
		local new_pay_ment2:Payment  = Payment()
		new_pay_ment2.amount         = piece_uploaded.price
		new_pay_ment2.file_id        = file_id
		new_pay_ment2.piece_id       = piece_id
		new_pay_ment2.term           = piece_uploaded.payterm
		new_pay_ment2.last_pay_block = get_header_block_num()
		new_pay_ment2.node_id        = node_id
		new_pay_ment2.account_key    = key_to_confirm
		
		pprint("******4*********")
		table.append(self.storage.unPaied, json.dumps(new_pay_ment2))
	end 
		
	--调用钱包
	if false == allow_piece_saved(file_id, piece_id, node_id) then
		pprint("Confim failure: call allow_piece_saved failure.") 
		return
	end
	
	pprint("confirm successfully.")	
end


function M:Access(file_id:string)
	self:pay()
	
	--检查参数
	if file_id == nil then
		pprint("Access error: invalid file id.")
		return
	end
	
	--
	local file_saved_rec_str :string = self.storage.upload_info_table[file_id]
	if file_saved_rec_str == nil then
		pprint("Access error: file is not exist.")
		return
	end
	local file_saved_rec :FileSavedRecord = totable(json.loads(file_saved_rec_str))

	if false == allow_enable_access(file_id, caller) then
		pprint("Access error: can not access file.")
		return 
	end
	
	pprint("access successfully.")
end


function M:on_deposit(numstr: int)
    self:pay()
    local amount:number = tonumber(numstr)
    if amount == nil then
        pprint("On deposit error: your input is nil.")
        return
    end
    if self.storage.users_balance[caller] == nil then
        self.storage.users_balance[caller] = amount
    else 
        amount = self.storage.users_balance[caller] + amount
        if amount < self.storage.users_balance[caller] then
            pprint("On deposit error: your balance is not enough.")
            return 
        end
        self.storage.users_balance[caller] = self.storage.users_balance[caller] + amount
    end
    pprint("On deposit successfully.")
end

return M

